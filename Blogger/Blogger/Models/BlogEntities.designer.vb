'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BlogData")>  _
Partial Public Class BlogEntitiesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBlogArticleCommentary(instance As BlogArticleCommentary)
    End Sub
  Partial Private Sub UpdateBlogArticleCommentary(instance As BlogArticleCommentary)
    End Sub
  Partial Private Sub DeleteBlogArticleCommentary(instance As BlogArticleCommentary)
    End Sub
  Partial Private Sub InsertBlogCategory(instance As BlogCategory)
    End Sub
  Partial Private Sub UpdateBlogCategory(instance As BlogCategory)
    End Sub
  Partial Private Sub DeleteBlogCategory(instance As BlogCategory)
    End Sub
  Partial Private Sub InsertBlogUser(instance As BlogUser)
    End Sub
  Partial Private Sub UpdateBlogUser(instance As BlogUser)
    End Sub
  Partial Private Sub DeleteBlogUser(instance As BlogUser)
    End Sub
  Partial Private Sub InsertBlogUserRole(instance As BlogUserRole)
    End Sub
  Partial Private Sub UpdateBlogUserRole(instance As BlogUserRole)
    End Sub
  Partial Private Sub DeleteBlogUserRole(instance As BlogUserRole)
    End Sub
  Partial Private Sub InsertBlogArticle(instance As BlogArticle)
    End Sub
  Partial Private Sub UpdateBlogArticle(instance As BlogArticle)
    End Sub
  Partial Private Sub DeleteBlogArticle(instance As BlogArticle)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("BlogDataConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property BlogArticleCommentaries() As System.Data.Linq.Table(Of BlogArticleCommentary)
		Get
			Return Me.GetTable(Of BlogArticleCommentary)
		End Get
	End Property
	
	Public ReadOnly Property BlogCategories() As System.Data.Linq.Table(Of BlogCategory)
		Get
			Return Me.GetTable(Of BlogCategory)
		End Get
	End Property
	
	Public ReadOnly Property BlogUsers() As System.Data.Linq.Table(Of BlogUser)
		Get
			Return Me.GetTable(Of BlogUser)
		End Get
	End Property
	
	Public ReadOnly Property BlogUserRoles() As System.Data.Linq.Table(Of BlogUserRole)
		Get
			Return Me.GetTable(Of BlogUserRole)
		End Get
	End Property
	
	Public ReadOnly Property BlogArticles() As System.Data.Linq.Table(Of BlogArticle)
		Get
			Return Me.GetTable(Of BlogArticle)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BlogArticleCommentary")>  _
Partial Public Class BlogArticleCommentary
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _commentaryId As Integer
	
	Private _commentaryText As String
	
	Private _commentaryDate As Date
	
	Private _commentaryArticleId As Integer
	
	Private _commentaryAutorId As System.Nullable(Of Integer)
	
	Private _BlogUser As EntityRef(Of BlogUser)
	
	Private _BlogArticle As EntityRef(Of BlogArticle)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncommentaryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OncommentaryIdChanged()
    End Sub
    Partial Private Sub OncommentaryTextChanging(value As String)
    End Sub
    Partial Private Sub OncommentaryTextChanged()
    End Sub
    Partial Private Sub OncommentaryDateChanging(value As Date)
    End Sub
    Partial Private Sub OncommentaryDateChanged()
    End Sub
    Partial Private Sub OncommentaryArticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OncommentaryArticleIdChanged()
    End Sub
    Partial Private Sub OncommentaryAutorIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncommentaryAutorIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BlogUser = CType(Nothing, EntityRef(Of BlogUser))
		Me._BlogArticle = CType(Nothing, EntityRef(Of BlogArticle))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_commentaryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property commentaryId() As Integer
		Get
			Return Me._commentaryId
		End Get
		Set
			If ((Me._commentaryId = value)  _
						= false) Then
				Me.OncommentaryIdChanging(value)
				Me.SendPropertyChanging
				Me._commentaryId = value
				Me.SendPropertyChanged("commentaryId")
				Me.OncommentaryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_commentaryText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property commentaryText() As String
		Get
			Return Me._commentaryText
		End Get
		Set
			If (String.Equals(Me._commentaryText, value) = false) Then
				Me.OncommentaryTextChanging(value)
				Me.SendPropertyChanging
				Me._commentaryText = value
				Me.SendPropertyChanged("commentaryText")
				Me.OncommentaryTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_commentaryDate", DbType:="Date NOT NULL")>  _
	Public Property commentaryDate() As Date
		Get
			Return Me._commentaryDate
		End Get
		Set
			If ((Me._commentaryDate = value)  _
						= false) Then
				Me.OncommentaryDateChanging(value)
				Me.SendPropertyChanging
				Me._commentaryDate = value
				Me.SendPropertyChanged("commentaryDate")
				Me.OncommentaryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_commentaryArticleId", DbType:="Int NOT NULL")>  _
	Public Property commentaryArticleId() As Integer
		Get
			Return Me._commentaryArticleId
		End Get
		Set
			If ((Me._commentaryArticleId = value)  _
						= false) Then
				If Me._BlogArticle.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncommentaryArticleIdChanging(value)
				Me.SendPropertyChanging
				Me._commentaryArticleId = value
				Me.SendPropertyChanged("commentaryArticleId")
				Me.OncommentaryArticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_commentaryAutorId", DbType:="Int")>  _
	Public Property commentaryAutorId() As System.Nullable(Of Integer)
		Get
			Return Me._commentaryAutorId
		End Get
		Set
			If (Me._commentaryAutorId.Equals(value) = false) Then
				If Me._BlogUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncommentaryAutorIdChanging(value)
				Me.SendPropertyChanging
				Me._commentaryAutorId = value
				Me.SendPropertyChanged("commentaryAutorId")
				Me.OncommentaryAutorIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogUser_BlogArticleCommentary", Storage:="_BlogUser", ThisKey:="commentaryAutorId", OtherKey:="userId", IsForeignKey:=true)>  _
	Public Property BlogUser() As BlogUser
		Get
			Return Me._BlogUser.Entity
		End Get
		Set
			Dim previousValue As BlogUser = Me._BlogUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BlogUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BlogUser.Entity = Nothing
					previousValue.BlogArticleCommentaries.Remove(Me)
				End If
				Me._BlogUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BlogArticleCommentaries.Add(Me)
					Me._commentaryAutorId = value.userId
				Else
					Me._commentaryAutorId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("BlogUser")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogArticle_BlogArticleCommentary", Storage:="_BlogArticle", ThisKey:="commentaryArticleId", OtherKey:="articleId", IsForeignKey:=true)>  _
	Public Property BlogArticle() As BlogArticle
		Get
			Return Me._BlogArticle.Entity
		End Get
		Set
			Dim previousValue As BlogArticle = Me._BlogArticle.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BlogArticle.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BlogArticle.Entity = Nothing
					previousValue.BlogArticleCommentaries.Remove(Me)
				End If
				Me._BlogArticle.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BlogArticleCommentaries.Add(Me)
					Me._commentaryArticleId = value.articleId
				Else
					Me._commentaryArticleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("BlogArticle")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BlogCategory")>  _
Partial Public Class BlogCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _categoryId As Integer
	
	Private _categoryName As String
	
	Private _categoryDescription As String
	
	Private _BlogArticles As EntitySet(Of BlogArticle)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OncategoryIdChanged()
    End Sub
    Partial Private Sub OncategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OncategoryNameChanged()
    End Sub
    Partial Private Sub OncategoryDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OncategoryDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BlogArticles = New EntitySet(Of BlogArticle)(AddressOf Me.attach_BlogArticles, AddressOf Me.detach_BlogArticles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property categoryId() As Integer
		Get
			Return Me._categoryId
		End Get
		Set
			If ((Me._categoryId = value)  _
						= false) Then
				Me.OncategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._categoryId = value
				Me.SendPropertyChanged("categoryId")
				Me.OncategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property categoryName() As String
		Get
			Return Me._categoryName
		End Get
		Set
			If (String.Equals(Me._categoryName, value) = false) Then
				Me.OncategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._categoryName = value
				Me.SendPropertyChanged("categoryName")
				Me.OncategoryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_categoryDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property categoryDescription() As String
		Get
			Return Me._categoryDescription
		End Get
		Set
			If (String.Equals(Me._categoryDescription, value) = false) Then
				Me.OncategoryDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._categoryDescription = value
				Me.SendPropertyChanged("categoryDescription")
				Me.OncategoryDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogCategory_BlogArticle", Storage:="_BlogArticles", ThisKey:="categoryId", OtherKey:="articleCategoryId")>  _
	Public Property BlogArticles() As EntitySet(Of BlogArticle)
		Get
			Return Me._BlogArticles
		End Get
		Set
			Me._BlogArticles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BlogArticles(ByVal entity As BlogArticle)
		Me.SendPropertyChanging
		entity.BlogCategory = Me
	End Sub
	
	Private Sub detach_BlogArticles(ByVal entity As BlogArticle)
		Me.SendPropertyChanging
		entity.BlogCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BlogUser")>  _
Partial Public Class BlogUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _userId As Integer
	
	Private _userFirsName As String
	
	Private _userLastName As String
	
	Private _userEmail As String
	
	Private _userNickName As String
	
	Private _userPassword As String
	
	Private _userRoleId As Integer
	
	Private _BlogArticleCommentaries As EntitySet(Of BlogArticleCommentary)
	
	Private _BlogArticles As EntitySet(Of BlogArticle)
	
	Private _BlogUserRole As EntityRef(Of BlogUserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnuserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnuserIdChanged()
    End Sub
    Partial Private Sub OnuserFirsNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserFirsNameChanged()
    End Sub
    Partial Private Sub OnuserLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserLastNameChanged()
    End Sub
    Partial Private Sub OnuserEmailChanging(value As String)
    End Sub
    Partial Private Sub OnuserEmailChanged()
    End Sub
    Partial Private Sub OnuserNickNameChanging(value As String)
    End Sub
    Partial Private Sub OnuserNickNameChanged()
    End Sub
    Partial Private Sub OnuserPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnuserPasswordChanged()
    End Sub
    Partial Private Sub OnuserRoleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnuserRoleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BlogArticleCommentaries = New EntitySet(Of BlogArticleCommentary)(AddressOf Me.attach_BlogArticleCommentaries, AddressOf Me.detach_BlogArticleCommentaries)
		Me._BlogArticles = New EntitySet(Of BlogArticle)(AddressOf Me.attach_BlogArticles, AddressOf Me.detach_BlogArticles)
		Me._BlogUserRole = CType(Nothing, EntityRef(Of BlogUserRole))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property userId() As Integer
		Get
			Return Me._userId
		End Get
		Set
			If ((Me._userId = value)  _
						= false) Then
				Me.OnuserIdChanging(value)
				Me.SendPropertyChanging
				Me._userId = value
				Me.SendPropertyChanged("userId")
				Me.OnuserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userFirsName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property userFirsName() As String
		Get
			Return Me._userFirsName
		End Get
		Set
			If (String.Equals(Me._userFirsName, value) = false) Then
				Me.OnuserFirsNameChanging(value)
				Me.SendPropertyChanging
				Me._userFirsName = value
				Me.SendPropertyChanged("userFirsName")
				Me.OnuserFirsNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userLastName", DbType:="VarChar(50)")>  _
	Public Property userLastName() As String
		Get
			Return Me._userLastName
		End Get
		Set
			If (String.Equals(Me._userLastName, value) = false) Then
				Me.OnuserLastNameChanging(value)
				Me.SendPropertyChanging
				Me._userLastName = value
				Me.SendPropertyChanged("userLastName")
				Me.OnuserLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userEmail", DbType:="VarChar(50)")>  _
	Public Property userEmail() As String
		Get
			Return Me._userEmail
		End Get
		Set
			If (String.Equals(Me._userEmail, value) = false) Then
				Me.OnuserEmailChanging(value)
				Me.SendPropertyChanging
				Me._userEmail = value
				Me.SendPropertyChanged("userEmail")
				Me.OnuserEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userNickName", DbType:="VarChar(50)")>  _
	Public Property userNickName() As String
		Get
			Return Me._userNickName
		End Get
		Set
			If (String.Equals(Me._userNickName, value) = false) Then
				Me.OnuserNickNameChanging(value)
				Me.SendPropertyChanging
				Me._userNickName = value
				Me.SendPropertyChanged("userNickName")
				Me.OnuserNickNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userPassword", DbType:="VarChar(50)")>  _
	Public Property userPassword() As String
		Get
			Return Me._userPassword
		End Get
		Set
			If (String.Equals(Me._userPassword, value) = false) Then
				Me.OnuserPasswordChanging(value)
				Me.SendPropertyChanging
				Me._userPassword = value
				Me.SendPropertyChanged("userPassword")
				Me.OnuserPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userRoleId", DbType:="Int NOT NULL")>  _
	Public Property userRoleId() As Integer
		Get
			Return Me._userRoleId
		End Get
		Set
			If ((Me._userRoleId = value)  _
						= false) Then
				If Me._BlogUserRole.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnuserRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._userRoleId = value
				Me.SendPropertyChanged("userRoleId")
				Me.OnuserRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogUser_BlogArticleCommentary", Storage:="_BlogArticleCommentaries", ThisKey:="userId", OtherKey:="commentaryAutorId")>  _
	Public Property BlogArticleCommentaries() As EntitySet(Of BlogArticleCommentary)
		Get
			Return Me._BlogArticleCommentaries
		End Get
		Set
			Me._BlogArticleCommentaries.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogUser_BlogArticle", Storage:="_BlogArticles", ThisKey:="userId", OtherKey:="articleAutorId")>  _
	Public Property BlogArticles() As EntitySet(Of BlogArticle)
		Get
			Return Me._BlogArticles
		End Get
		Set
			Me._BlogArticles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogUserRole_BlogUser", Storage:="_BlogUserRole", ThisKey:="userRoleId", OtherKey:="roleId", IsForeignKey:=true)>  _
	Public Property BlogUserRole() As BlogUserRole
		Get
			Return Me._BlogUserRole.Entity
		End Get
		Set
			Dim previousValue As BlogUserRole = Me._BlogUserRole.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BlogUserRole.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BlogUserRole.Entity = Nothing
					previousValue.BlogUsers.Remove(Me)
				End If
				Me._BlogUserRole.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BlogUsers.Add(Me)
					Me._userRoleId = value.roleId
				Else
					Me._userRoleId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("BlogUserRole")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BlogArticleCommentaries(ByVal entity As BlogArticleCommentary)
		Me.SendPropertyChanging
		entity.BlogUser = Me
	End Sub
	
	Private Sub detach_BlogArticleCommentaries(ByVal entity As BlogArticleCommentary)
		Me.SendPropertyChanging
		entity.BlogUser = Nothing
	End Sub
	
	Private Sub attach_BlogArticles(ByVal entity As BlogArticle)
		Me.SendPropertyChanging
		entity.BlogUser = Me
	End Sub
	
	Private Sub detach_BlogArticles(ByVal entity As BlogArticle)
		Me.SendPropertyChanging
		entity.BlogUser = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BlogUserRole")>  _
Partial Public Class BlogUserRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _roleId As Integer
	
	Private _roleName As String
	
	Private _BlogUsers As EntitySet(Of BlogUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnroleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnroleIdChanged()
    End Sub
    Partial Private Sub OnroleNameChanging(value As String)
    End Sub
    Partial Private Sub OnroleNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BlogUsers = New EntitySet(Of BlogUser)(AddressOf Me.attach_BlogUsers, AddressOf Me.detach_BlogUsers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roleId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property roleId() As Integer
		Get
			Return Me._roleId
		End Get
		Set
			If ((Me._roleId = value)  _
						= false) Then
				Me.OnroleIdChanging(value)
				Me.SendPropertyChanging
				Me._roleId = value
				Me.SendPropertyChanged("roleId")
				Me.OnroleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_roleName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property roleName() As String
		Get
			Return Me._roleName
		End Get
		Set
			If (String.Equals(Me._roleName, value) = false) Then
				Me.OnroleNameChanging(value)
				Me.SendPropertyChanging
				Me._roleName = value
				Me.SendPropertyChanged("roleName")
				Me.OnroleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogUserRole_BlogUser", Storage:="_BlogUsers", ThisKey:="roleId", OtherKey:="userRoleId")>  _
	Public Property BlogUsers() As EntitySet(Of BlogUser)
		Get
			Return Me._BlogUsers
		End Get
		Set
			Me._BlogUsers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BlogUsers(ByVal entity As BlogUser)
		Me.SendPropertyChanging
		entity.BlogUserRole = Me
	End Sub
	
	Private Sub detach_BlogUsers(ByVal entity As BlogUser)
		Me.SendPropertyChanging
		entity.BlogUserRole = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BlogArticle")>  _
Partial Public Class BlogArticle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _articleId As Integer
	
	Private _articleText As String
	
	Private _articleDate As Date
	
	Private _articleAutorId As Integer
	
	Private _articleCategoryId As Integer
	
	Private _articleTittle As String
	
	Private _BlogArticleCommentaries As EntitySet(Of BlogArticleCommentary)
	
	Private _BlogCategory As EntityRef(Of BlogCategory)
	
	Private _BlogUser As EntityRef(Of BlogUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnarticleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnarticleIdChanged()
    End Sub
    Partial Private Sub OnarticleTextChanging(value As String)
    End Sub
    Partial Private Sub OnarticleTextChanged()
    End Sub
    Partial Private Sub OnarticleDateChanging(value As Date)
    End Sub
    Partial Private Sub OnarticleDateChanged()
    End Sub
    Partial Private Sub OnarticleAutorIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnarticleAutorIdChanged()
    End Sub
    Partial Private Sub OnarticleCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnarticleCategoryIdChanged()
    End Sub
    Partial Private Sub OnarticleTittleChanging(value As String)
    End Sub
    Partial Private Sub OnarticleTittleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BlogArticleCommentaries = New EntitySet(Of BlogArticleCommentary)(AddressOf Me.attach_BlogArticleCommentaries, AddressOf Me.detach_BlogArticleCommentaries)
		Me._BlogCategory = CType(Nothing, EntityRef(Of BlogCategory))
		Me._BlogUser = CType(Nothing, EntityRef(Of BlogUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property articleId() As Integer
		Get
			Return Me._articleId
		End Get
		Set
			If ((Me._articleId = value)  _
						= false) Then
				Me.OnarticleIdChanging(value)
				Me.SendPropertyChanging
				Me._articleId = value
				Me.SendPropertyChanged("articleId")
				Me.OnarticleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleText", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property articleText() As String
		Get
			Return Me._articleText
		End Get
		Set
			If (String.Equals(Me._articleText, value) = false) Then
				Me.OnarticleTextChanging(value)
				Me.SendPropertyChanging
				Me._articleText = value
				Me.SendPropertyChanged("articleText")
				Me.OnarticleTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleDate", DbType:="Date NOT NULL")>  _
	Public Property articleDate() As Date
		Get
			Return Me._articleDate
		End Get
		Set
			If ((Me._articleDate = value)  _
						= false) Then
				Me.OnarticleDateChanging(value)
				Me.SendPropertyChanging
				Me._articleDate = value
				Me.SendPropertyChanged("articleDate")
				Me.OnarticleDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleAutorId", DbType:="Int NOT NULL")>  _
	Public Property articleAutorId() As Integer
		Get
			Return Me._articleAutorId
		End Get
		Set
			If ((Me._articleAutorId = value)  _
						= false) Then
				If Me._BlogUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnarticleAutorIdChanging(value)
				Me.SendPropertyChanging
				Me._articleAutorId = value
				Me.SendPropertyChanged("articleAutorId")
				Me.OnarticleAutorIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleCategoryId", DbType:="Int NOT NULL")>  _
	Public Property articleCategoryId() As Integer
		Get
			Return Me._articleCategoryId
		End Get
		Set
			If ((Me._articleCategoryId = value)  _
						= false) Then
				If Me._BlogCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnarticleCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._articleCategoryId = value
				Me.SendPropertyChanged("articleCategoryId")
				Me.OnarticleCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleTittle", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property articleTittle() As String
		Get
			Return Me._articleTittle
		End Get
		Set
			If (String.Equals(Me._articleTittle, value) = false) Then
				Me.OnarticleTittleChanging(value)
				Me.SendPropertyChanging
				Me._articleTittle = value
				Me.SendPropertyChanged("articleTittle")
				Me.OnarticleTittleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogArticle_BlogArticleCommentary", Storage:="_BlogArticleCommentaries", ThisKey:="articleId", OtherKey:="commentaryArticleId")>  _
	Public Property BlogArticleCommentaries() As EntitySet(Of BlogArticleCommentary)
		Get
			Return Me._BlogArticleCommentaries
		End Get
		Set
			Me._BlogArticleCommentaries.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogCategory_BlogArticle", Storage:="_BlogCategory", ThisKey:="articleCategoryId", OtherKey:="categoryId", IsForeignKey:=true)>  _
	Public Property BlogCategory() As BlogCategory
		Get
			Return Me._BlogCategory.Entity
		End Get
		Set
			Dim previousValue As BlogCategory = Me._BlogCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BlogCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BlogCategory.Entity = Nothing
					previousValue.BlogArticles.Remove(Me)
				End If
				Me._BlogCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BlogArticles.Add(Me)
					Me._articleCategoryId = value.categoryId
				Else
					Me._articleCategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("BlogCategory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BlogUser_BlogArticle", Storage:="_BlogUser", ThisKey:="articleAutorId", OtherKey:="userId", IsForeignKey:=true)>  _
	Public Property BlogUser() As BlogUser
		Get
			Return Me._BlogUser.Entity
		End Get
		Set
			Dim previousValue As BlogUser = Me._BlogUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BlogUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BlogUser.Entity = Nothing
					previousValue.BlogArticles.Remove(Me)
				End If
				Me._BlogUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BlogArticles.Add(Me)
					Me._articleAutorId = value.userId
				Else
					Me._articleAutorId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("BlogUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BlogArticleCommentaries(ByVal entity As BlogArticleCommentary)
		Me.SendPropertyChanging
		entity.BlogArticle = Me
	End Sub
	
	Private Sub detach_BlogArticleCommentaries(ByVal entity As BlogArticleCommentary)
		Me.SendPropertyChanging
		entity.BlogArticle = Nothing
	End Sub
End Class
